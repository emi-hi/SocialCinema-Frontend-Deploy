{"ast":null,"code":"import _slicedToArray from \"/Users/Emily/lighthouse/finalProject/cinema/social-cinema/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useReducer, useEffect } from \"react\";\nimport reducer, { SET_USER, SET_GENRES } from \"../reducers/application\";\nimport axios from 'axios';\n\nconst initGenres = () => {\n  let genres = [];\n  return axios.get(\"http://localhost:5000/api/genres\").then(response => {\n    genres = response.data.map(genre => {\n      return genre = {\n        id: genre.id,\n        preference: \"\"\n      };\n    });\n    return genres;\n  });\n};\n\nexport default function useApplicationData() {\n  const _useReducer = useReducer(reducer, {\n    user: JSON.parse(localStorage.getItem('user')) || \"\",\n    genres: [],\n    favorite_movies: {},\n    later_movies: {}\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    initGenres().then(res => {\n      setGenres(res);\n    });\n  }, []);\n  useEffect(() => {\n    if (state.user !== \"\") {\n      Promise.all([axios.get(\"http://localhost:5000/api/\".concat(state.user.name, \"/genres\"))]).then(all => {\n        setGenres(all[0].data.genres);\n      });\n    }\n  }, [state.user]);\n\n  const setUser = user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({\n      type: SET_USER,\n      value: user\n    });\n  };\n\n  const setGenres = genres => {\n    if (genres.length === 0) {\n      initGenres().then(res => {\n        dispatch({\n          type: SET_GENRES,\n          value: res\n        });\n      });\n    } else {\n      dispatch({\n        type: SET_GENRES,\n        value: genres\n      });\n    }\n  };\n\n  return {\n    state,\n    setUser,\n    setGenres\n  };\n}\n;","map":{"version":3,"sources":["/Users/Emily/lighthouse/finalProject/cinema/social-cinema/src/hooks/useApplicationData.js"],"names":["useReducer","useEffect","reducer","SET_USER","SET_GENRES","axios","initGenres","genres","get","then","response","data","map","genre","id","preference","useApplicationData","user","JSON","parse","localStorage","getItem","favorite_movies","later_movies","state","dispatch","res","setGenres","Promise","all","name","setUser","setItem","stringify","type","value","length"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,OAAP,IAAkBC,QAAlB,EAA4BC,UAA5B,QAA8C,yBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,MAAIC,MAAM,GAAG,EAAb;AACA,SAAOF,KAAK,CAACG,GAAN,CAAU,kCAAV,EACNC,IADM,CACDC,QAAQ,IAAI;AAChBH,IAAAA,MAAM,GAAGG,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,KAAK,IAAI;AAClC,aAAOA,KAAK,GAAG;AACbC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADG;AAEbC,QAAAA,UAAU,EAAE;AAFC,OAAf;AAID,KALQ,CAAT;AAOA,WAAOR,MAAP;AACD,GAVM,CAAP;AAWD,CAbD;;AAeA,eAAe,SAASS,kBAAT,GAA8B;AAAA,sBACjBhB,UAAU,CAACE,OAAD,EAAU;AAC5Ce,IAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EADN;AAE5Cd,IAAAA,MAAM,EAAE,EAFoC;AAG5Ce,IAAAA,eAAe,EAAE,EAH2B;AAI5CC,IAAAA,YAAY,EAAE;AAJ8B,GAAV,CADO;AAAA;AAAA,QACpCC,KADoC;AAAA,QAC7BC,QAD6B;;AAQ3CxB,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,UAAU,GACTG,IADD,CACMiB,GAAG,IAAI;AACXC,MAAAA,SAAS,CAACD,GAAD,CAAT;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,KAAK,CAACP,IAAN,KAAe,EAAnB,EAAuB;AACrBW,MAAAA,OAAO,CAACC,GAAR,CAAY,CACVxB,KAAK,CAACG,GAAN,qCAAuCgB,KAAK,CAACP,IAAN,CAAWa,IAAlD,aADU,CAAZ,EAGCrB,IAHD,CAGOoB,GAAD,IAAS;AACbF,QAAAA,SAAS,CAACE,GAAG,CAAC,CAAD,CAAH,CAAOlB,IAAP,CAAYJ,MAAb,CAAT;AACD,OALD;AAMD;AACF,GATQ,EASN,CAACiB,KAAK,CAACP,IAAP,CATM,CAAT;;AAWA,QAAMc,OAAO,GAAGd,IAAI,IAAI;AACtBG,IAAAA,YAAY,CAACY,OAAb,CAAqB,MAArB,EAA6Bd,IAAI,CAACe,SAAL,CAAehB,IAAf,CAA7B;AACAQ,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE/B,QAAR;AAAkBgC,MAAAA,KAAK,EAAElB;AAAzB,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMU,SAAS,GAAGpB,MAAM,IAAI;AAC1B,QAAIA,MAAM,CAAC6B,MAAP,KAAkB,CAAtB,EAAyB;AACvB9B,MAAAA,UAAU,GACTG,IADD,CACMiB,GAAG,IAAI;AACXD,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAE9B,UAAR;AAAoB+B,UAAAA,KAAK,EAAET;AAA3B,SAAD,CAAR;AACD,OAHD;AAID,KALD,MAKO;AACLD,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE9B,UAAR;AAAoB+B,QAAAA,KAAK,EAAE5B;AAA3B,OAAD,CAAR;AACD;AACF,GATD;;AAWA,SAAO;AAAEiB,IAAAA,KAAF;AAASO,IAAAA,OAAT;AAAkBJ,IAAAA;AAAlB,GAAP;AACD;AAAA","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport reducer, { SET_USER, SET_GENRES } from \"../reducers/application\";\nimport axios from 'axios'\n\nconst initGenres = () => {\n  let genres = []\n  return axios.get(\"http://localhost:5000/api/genres\")\n  .then(response => {\n    genres = response.data.map(genre => {\n      return genre = {\n        id: genre.id,\n        preference: \"\"\n      }\n    })\n\n    return genres\n  })\n}\n\nexport default function useApplicationData() {\n  const [state, dispatch] = useReducer(reducer, {\n    user: JSON.parse(localStorage.getItem('user')) || \"\",\n    genres: [],\n    favorite_movies: {},\n    later_movies: {}\n  });\n\n  useEffect(() => {\n    initGenres()\n    .then(res => {\n      setGenres(res);\n    })\n  }, [])\n\n  useEffect(() => {\n    if (state.user !== \"\") {\n      Promise.all([\n        axios.get(`http://localhost:5000/api/${state.user.name}/genres`)\n      ])\n      .then((all) => {\n        setGenres(all[0].data.genres)\n      })\n    }\n  }, [state.user])\n\n  const setUser = user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({ type: SET_USER, value: user });\n  };\n\n  const setGenres = genres => {\n    if (genres.length === 0) {\n      initGenres()\n      .then(res => {\n        dispatch({ type: SET_GENRES, value: res });\n      })\n    } else {\n      dispatch({ type: SET_GENRES, value: genres });\n    }\n  };\n\n  return { state, setUser, setGenres };\n};\n"]},"metadata":{},"sourceType":"module"}