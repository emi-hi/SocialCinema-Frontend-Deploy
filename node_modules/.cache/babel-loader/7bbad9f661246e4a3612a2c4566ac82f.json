{"ast":null,"code":"import _slicedToArray from \"/Users/Emily/lighthouse/finalProject/cinema/social-cinema/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useReducer, useEffect } from \"react\";\nimport reducer, { SET_USER, SET_GENRES, SET_LATER_MOVIES, SET_FRIENDS, SET_GROUP, SET_FAVORITE_MOVIES } from \"../reducers/application\";\nimport axios from 'axios';\n\nconst initGenres = () => {\n  let genres = [];\n  return axios.get(\"http://localhost:5000/api/genres\").then(response => {\n    genres = response.data.map(genre => {\n      return genre = {\n        id: genre.id,\n        preference: null\n      };\n    });\n    return genres;\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nexport default function useApplicationData() {\n  const _useReducer = useReducer(reducer, {\n    user: JSON.parse(localStorage.getItem('user')) || \"\",\n    genres: [],\n    favorited_movies: JSON.parse(localStorage.getItem('favoritedMovies')) || [],\n    later_movies: JSON.parse(localStorage.getItem('laterMovies')) || [],\n    friends: [],\n    group: JSON.parse(localStorage.getItem('group')) || []\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    initGenres().then(res => {\n      setGenres(res);\n    });\n  }, []);\n  useEffect(() => {\n    if (state.user !== \"\") {\n      Promise.all([axios.get(\"http://localhost:5000/api/\".concat(state.user.name, \"/genres\")), axios.get(\"http://localhost:5000/api/users\")]).then(all => {\n        setGenres(all[0].data.genres);\n        setFriends(all[1].data.users);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [state.user]);\n\n  const setUser = user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({\n      type: SET_USER,\n      value: user\n    });\n  };\n\n  const setGenres = genres => {\n    if (genres.length === 0) {\n      initGenres().then(res => {\n        dispatch({\n          type: SET_GENRES,\n          value: res\n        });\n      });\n    } else {\n      dispatch({\n        type: SET_GENRES,\n        value: genres\n      });\n    }\n  };\n\n  const setLaterMovies = laterMovies => {\n    localStorage.setItem(\"laterMovies\", JSON.stringify(laterMovies));\n    dispatch({\n      type: SET_LATER_MOVIES,\n      value: laterMovies\n    });\n  };\n\n  const removeLaterMovie = id => {\n    axios.delete(\"http://localhost:5000/api/\".concat(state.user.name, \"/latermovies\"), {\n      data: {\n        \"id\": id\n      }\n    }).then(response => {\n      setLaterMovies(response.data.later_movies);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const setFavoriteMovies = favoritedMovies => {\n    localStorage.setItem(\"favoritedMovies\", JSON.stringify(favoritedMovies));\n    dispatch({\n      type: SET_FAVORITE_MOVIES,\n      value: favoritedMovies\n    });\n  };\n\n  const removeFavoritedMovie = id => {\n    axios.delete(\"http://localhost:5000/api/\".concat(state.user.name, \"/favmovies\"), {\n      data: {\n        \"id\": id\n      }\n    }).then(response => {\n      setFavoriteMovies(response.data.favorited_movies);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const setFriends = friends => {\n    dispatch({\n      type: SET_FRIENDS,\n      value: friends\n    });\n  };\n\n  const setGroup = group => {\n    localStorage.setItem(\"group\", JSON.stringify(group));\n    dispatch({\n      type: SET_GROUP,\n      value: group\n    });\n  };\n\n  return {\n    state,\n    setUser,\n    setGenres,\n    setLaterMovies,\n    removeLaterMovie,\n    setFriends,\n    setGroup,\n    setFavoriteMovies,\n    removeFavoritedMovie\n  };\n}\n;","map":{"version":3,"sources":["/Users/Emily/lighthouse/finalProject/cinema/social-cinema/src/hooks/useApplicationData.js"],"names":["useReducer","useEffect","reducer","SET_USER","SET_GENRES","SET_LATER_MOVIES","SET_FRIENDS","SET_GROUP","SET_FAVORITE_MOVIES","axios","initGenres","genres","get","then","response","data","map","genre","id","preference","catch","error","console","log","useApplicationData","user","JSON","parse","localStorage","getItem","favorited_movies","later_movies","friends","group","state","dispatch","res","setGenres","Promise","all","name","setFriends","users","setUser","setItem","stringify","type","value","length","setLaterMovies","laterMovies","removeLaterMovie","delete","setFavoriteMovies","favoritedMovies","removeFavoritedMovie","setGroup"],"mappings":"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","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport reducer, { SET_USER, SET_GENRES, SET_LATER_MOVIES, SET_FRIENDS, SET_GROUP, SET_FAVORITE_MOVIES } from \"../reducers/application\";\nimport axios from 'axios'\n\nconst initGenres = () => {\n  let genres = []\n  return axios.get(\"http://localhost:5000/api/genres\")\n  .then(response => {\n    genres = response.data.map(genre => {\n      return genre = {\n        id: genre.id,\n        preference: null\n      }\n    })\n    return genres\n  })\n  .catch(error => {console.log(error)})\n};\n\nexport default function useApplicationData() {\n  const [state, dispatch] = useReducer(reducer, {\n    user: JSON.parse(localStorage.getItem('user')) || \"\",\n    genres: [],\n    favorited_movies: JSON.parse(localStorage.getItem('favoritedMovies')) || [],\n    later_movies: JSON.parse(localStorage.getItem('laterMovies')) || [],\n    friends: [],\n    group: JSON.parse(localStorage.getItem('group')) || []\n  });\n\n  useEffect(() => {\n    initGenres()\n    .then(res => {\n      setGenres(res);\n    })\n  }, [])\n\n  useEffect(() => {\n    if (state.user !== \"\") {\n      Promise.all([\n        axios.get(`http://localhost:5000/api/${state.user.name}/genres`),\n        axios.get(\"http://localhost:5000/api/users\")\n      ])\n      .then((all) => {\n        setGenres(all[0].data.genres)\n        setFriends(all[1].data.users)\n      })\n      .catch(error => {console.log(error)})\n    }\n  }, [state.user])\n\n  const setUser = user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({ type: SET_USER, value: user });\n  };\n\n  const setGenres = genres => {\n    if (genres.length === 0) {\n      initGenres()\n      .then(res => {\n        dispatch({ type: SET_GENRES, value: res });\n      })\n    } else {\n      dispatch({ type: SET_GENRES, value: genres });\n    }\n  };\n\n  const setLaterMovies = laterMovies => {\n    localStorage.setItem(\"laterMovies\", JSON.stringify(laterMovies))\n    dispatch({ type: SET_LATER_MOVIES, value:laterMovies });\n  }\n\n  const removeLaterMovie = id => {\n    axios.delete(`http://localhost:5000/api/${state.user.name}/latermovies`, { data: { \"id\": id } })\n    .then(response => {\n      setLaterMovies(response.data.later_movies)\n    })\n    .catch(error => {console.log(error)})\n  };\n\n  const setFavoriteMovies = favoritedMovies => {\n    localStorage.setItem(\"favoritedMovies\", JSON.stringify(favoritedMovies))\n    dispatch({ type: SET_FAVORITE_MOVIES, value:favoritedMovies });\n  };\n\n  const removeFavoritedMovie = id => {\n    axios.delete(`http://localhost:5000/api/${state.user.name}/favmovies`, { data: { \"id\": id } })\n    .then(response => {\n      setFavoriteMovies(response.data.favorited_movies)\n    })\n    .catch(error => {console.log(error)})\n  };\n\n  const setFriends = friends => {\n    dispatch({ type: SET_FRIENDS, value: friends });\n  };\n\n  const setGroup = group => {\n    localStorage.setItem(\"group\", JSON.stringify(group))\n    dispatch({ type: SET_GROUP, value: group });\n  };\n\n  return { state, setUser, setGenres, setLaterMovies, removeLaterMovie, setFriends, setGroup, setFavoriteMovies, removeFavoritedMovie };\n};\n"]},"metadata":{},"sourceType":"module"}