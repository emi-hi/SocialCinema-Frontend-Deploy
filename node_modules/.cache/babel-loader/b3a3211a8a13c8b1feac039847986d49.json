{"ast":null,"code":"import _slicedToArray from \"/Users/Emily/lighthouse/finalProject/cinema/social-cinema/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useReducer, useEffect } from \"react\";\nimport reducer, { SET_USER, SET_GENRES, SET_LATER_MOVIES, SET_FRIENDS, SET_GROUP, SET_FAVORITE_MOVIES, SET_THEME } from \"../reducers/application\";\nimport axios from 'axios';\n\nconst initGenres = () => {\n  let genres = [];\n  return axios.get(\"/api/genres\").then(response => {\n    genres = response.data.map(genre => {\n      return genre = {\n        id: genre.id,\n        preference: null\n      };\n    });\n    return genres;\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nexport default function useApplicationData() {\n  const _useReducer = useReducer(reducer, {\n    user: JSON.parse(localStorage.getItem('user')) || \"\",\n    genres: [],\n    favorited_movies: JSON.parse(localStorage.getItem('favoritedMovies')) || [],\n    later_movies: JSON.parse(localStorage.getItem('laterMovies')) || [],\n    friends: [],\n    group: JSON.parse(localStorage.getItem('group')) || [],\n    theme: false\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    initGenres().then(res => {\n      setGenres(res);\n    });\n  }, []);\n  useEffect(() => {\n    if (state.user !== \"\") {\n      Promise.all([axios.get(\"/api/\".concat(state.user.name, \"/genres\")), axios.get(\"/api/users\")]).then(all => {\n        setGenres(all[0].data.genres);\n        setFriends(all[1].data.users);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [state.user]);\n\n  const setUser = user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({\n      type: SET_USER,\n      value: user\n    });\n  };\n\n  const getGenres = () => {\n    axios.get(\"/api/\".concat(state.user.name, \"/genres\")).then(res => {\n      setGenres(res.data.genres);\n    });\n  };\n\n  const setGenres = genres => {\n    if (genres.length === 0) {\n      initGenres().then(res => {\n        dispatch({\n          type: SET_GENRES,\n          value: res\n        });\n      });\n    } else {\n      dispatch({\n        type: SET_GENRES,\n        value: genres\n      });\n    }\n  };\n\n  const setLaterMovies = laterMovies => {\n    localStorage.setItem(\"laterMovies\", JSON.stringify(laterMovies));\n    dispatch({\n      type: SET_LATER_MOVIES,\n      value: laterMovies\n    });\n  };\n\n  const removeLaterMovie = id => {\n    axios.delete(\"/api/\".concat(state.user.name, \"/latermovies\"), {\n      data: {\n        \"id\": id\n      }\n    }).then(response => {\n      setLaterMovies(response.data.later_movies);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const setFavoriteMovies = favoritedMovies => {\n    localStorage.setItem(\"favoritedMovies\", JSON.stringify(favoritedMovies));\n    dispatch({\n      type: SET_FAVORITE_MOVIES,\n      value: favoritedMovies\n    });\n  };\n\n  const removeFavoritedMovie = id => {\n    axios.delete(\"/api/\".concat(state.user.name, \"/favmovies\"), {\n      data: {\n        \"id\": id\n      }\n    }).then(response => {\n      setFavoriteMovies(response.data.favorited_movies);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const setFriends = friends => {\n    dispatch({\n      type: SET_FRIENDS,\n      value: friends\n    });\n  };\n\n  const setGroup = group => {\n    if (state.group.length === 1 && group.length === 0) {\n      getGenres();\n      setTheme(false);\n    }\n\n    localStorage.setItem(\"group\", JSON.stringify(group));\n    dispatch({\n      type: SET_GROUP,\n      value: group\n    });\n  };\n\n  const setTheme = value => {\n    dispatch({\n      type: SET_THEME,\n      value: value\n    });\n  };\n\n  return {\n    state,\n    setUser,\n    getGenres,\n    setGenres,\n    setLaterMovies,\n    removeLaterMovie,\n    setFriends,\n    setGroup,\n    setFavoriteMovies,\n    removeFavoritedMovie,\n    setTheme\n  };\n}\n;","map":{"version":3,"sources":["/Users/Emily/lighthouse/finalProject/cinema/social-cinema/src/hooks/useApplicationData.js"],"names":["useReducer","useEffect","reducer","SET_USER","SET_GENRES","SET_LATER_MOVIES","SET_FRIENDS","SET_GROUP","SET_FAVORITE_MOVIES","SET_THEME","axios","initGenres","genres","get","then","response","data","map","genre","id","preference","catch","error","console","log","useApplicationData","user","JSON","parse","localStorage","getItem","favorited_movies","later_movies","friends","group","theme","state","dispatch","res","setGenres","Promise","all","name","setFriends","users","setUser","setItem","stringify","type","value","getGenres","length","setLaterMovies","laterMovies","removeLaterMovie","delete","setFavoriteMovies","favoritedMovies","removeFavoritedMovie","setGroup","setTheme"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,OAAP,IAAkBC,QAAlB,EAA4BC,UAA5B,EAAwCC,gBAAxC,EAA0DC,WAA1D,EAAuEC,SAAvE,EAAkFC,mBAAlF,EAAuGC,SAAvG,QAAwH,yBAAxH;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,MAAIC,MAAM,GAAG,EAAb;AACA,SAAOF,KAAK,CAACG,GAAN,CAAU,aAAV,EACNC,IADM,CACDC,QAAQ,IAAI;AAChBH,IAAAA,MAAM,GAAGG,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,KAAK,IAAI;AAClC,aAAOA,KAAK,GAAG;AACbC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADG;AAEbC,QAAAA,UAAU,EAAE;AAFC,OAAf;AAID,KALQ,CAAT;AAMA,WAAOR,MAAP;AACD,GATM,EAUNS,KAVM,CAUAC,KAAK,IAAI;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,GAV7B,CAAP;AAWD,CAbD;;AAeA,eAAe,SAASG,kBAAT,GAA8B;AAAA,sBACjBzB,UAAU,CAACE,OAAD,EAAU;AAC5CwB,IAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EADN;AAE5ClB,IAAAA,MAAM,EAAE,EAFoC;AAG5CmB,IAAAA,gBAAgB,EAAEJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,KAAuD,EAH7B;AAI5CE,IAAAA,YAAY,EAAEL,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD,EAJrB;AAK5CG,IAAAA,OAAO,EAAE,EALmC;AAM5CC,IAAAA,KAAK,EAAEP,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EANR;AAO5CK,IAAAA,KAAK,EAAE;AAPqC,GAAV,CADO;AAAA;AAAA,QACpCC,KADoC;AAAA,QAC7BC,QAD6B;;AAW3CpC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,UAAU,GACTG,IADD,CACMwB,GAAG,IAAI;AACXC,MAAAA,SAAS,CAACD,GAAD,CAAT;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImC,KAAK,CAACV,IAAN,KAAe,EAAnB,EAAuB;AACrBc,MAAAA,OAAO,CAACC,GAAR,CAAY,CACV/B,KAAK,CAACG,GAAN,gBAAkBuB,KAAK,CAACV,IAAN,CAAWgB,IAA7B,aADU,EAEVhC,KAAK,CAACG,GAAN,CAAU,YAAV,CAFU,CAAZ,EAICC,IAJD,CAIO2B,GAAD,IAAS;AACbF,QAAAA,SAAS,CAACE,GAAG,CAAC,CAAD,CAAH,CAAOzB,IAAP,CAAYJ,MAAb,CAAT;AACA+B,QAAAA,UAAU,CAACF,GAAG,CAAC,CAAD,CAAH,CAAOzB,IAAP,CAAY4B,KAAb,CAAV;AACD,OAPD,EAQCvB,KARD,CAQOC,KAAK,IAAI;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,OARpC;AASD;AACF,GAZQ,EAYN,CAACc,KAAK,CAACV,IAAP,CAZM,CAAT;;AAcA,QAAMmB,OAAO,GAAGnB,IAAI,IAAI;AACtBG,IAAAA,YAAY,CAACiB,OAAb,CAAqB,MAArB,EAA6BnB,IAAI,CAACoB,SAAL,CAAerB,IAAf,CAA7B;AACAW,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE7C,QAAR;AAAkB8C,MAAAA,KAAK,EAAEvB;AAAzB,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMwB,SAAS,GAAG,MAAM;AACtBxC,IAAAA,KAAK,CAACG,GAAN,gBAAkBuB,KAAK,CAACV,IAAN,CAAWgB,IAA7B,cACC5B,IADD,CACMwB,GAAG,IAAI;AACXC,MAAAA,SAAS,CAACD,GAAG,CAACtB,IAAJ,CAASJ,MAAV,CAAT;AACD,KAHD;AAID,GALD;;AAOA,QAAM2B,SAAS,GAAG3B,MAAM,IAAI;AAC1B,QAAIA,MAAM,CAACuC,MAAP,KAAkB,CAAtB,EAAyB;AACvBxC,MAAAA,UAAU,GACTG,IADD,CACMwB,GAAG,IAAI;AACXD,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE5C,UAAR;AAAoB6C,UAAAA,KAAK,EAAEX;AAA3B,SAAD,CAAR;AACD,OAHD;AAID,KALD,MAKO;AACLD,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE5C,UAAR;AAAoB6C,QAAAA,KAAK,EAAErC;AAA3B,OAAD,CAAR;AACD;AACF,GATD;;AAWA,QAAMwC,cAAc,GAAGC,WAAW,IAAI;AACpCxB,IAAAA,YAAY,CAACiB,OAAb,CAAqB,aAArB,EAAoCnB,IAAI,CAACoB,SAAL,CAAeM,WAAf,CAApC;AACAhB,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE3C,gBAAR;AAA0B4C,MAAAA,KAAK,EAACI;AAAhC,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAGnC,EAAE,IAAI;AAC7BT,IAAAA,KAAK,CAAC6C,MAAN,gBAAqBnB,KAAK,CAACV,IAAN,CAAWgB,IAAhC,mBAAoD;AAAE1B,MAAAA,IAAI,EAAE;AAAE,cAAMG;AAAR;AAAR,KAApD,EACCL,IADD,CACMC,QAAQ,IAAI;AAChBqC,MAAAA,cAAc,CAACrC,QAAQ,CAACC,IAAT,CAAcgB,YAAf,CAAd;AACD,KAHD,EAICX,KAJD,CAIOC,KAAK,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,KAJpC;AAKD,GAND;;AAQA,QAAMkC,iBAAiB,GAAGC,eAAe,IAAI;AAC3C5B,IAAAA,YAAY,CAACiB,OAAb,CAAqB,iBAArB,EAAwCnB,IAAI,CAACoB,SAAL,CAAeU,eAAf,CAAxC;AACApB,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAExC,mBAAR;AAA6ByC,MAAAA,KAAK,EAACQ;AAAnC,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,oBAAoB,GAAGvC,EAAE,IAAI;AACjCT,IAAAA,KAAK,CAAC6C,MAAN,gBAAqBnB,KAAK,CAACV,IAAN,CAAWgB,IAAhC,iBAAkD;AAAE1B,MAAAA,IAAI,EAAE;AAAE,cAAMG;AAAR;AAAR,KAAlD,EACCL,IADD,CACMC,QAAQ,IAAI;AAChByC,MAAAA,iBAAiB,CAACzC,QAAQ,CAACC,IAAT,CAAce,gBAAf,CAAjB;AACD,KAHD,EAICV,KAJD,CAIOC,KAAK,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,KAJpC;AAKD,GAND;;AAQA,QAAMqB,UAAU,GAAGV,OAAO,IAAI;AAC5BI,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE1C,WAAR;AAAqB2C,MAAAA,KAAK,EAAEhB;AAA5B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAM0B,QAAQ,GAAGzB,KAAK,IAAI;AACxB,QAAIE,KAAK,CAACF,KAAN,CAAYiB,MAAZ,KAAuB,CAAvB,IAA4BjB,KAAK,CAACiB,MAAN,KAAiB,CAAjD,EAAqD;AACnDD,MAAAA,SAAS;AACTU,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;;AACD/B,IAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAeb,KAAf,CAA9B;AACAG,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEzC,SAAR;AAAmB0C,MAAAA,KAAK,EAAEf;AAA1B,KAAD,CAAR;AACD,GAPD;;AASA,QAAM0B,QAAQ,GAAGX,KAAK,IAAI;AACxBZ,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEvC,SAAR;AAAmBwC,MAAAA,KAAK,EAAEA;AAA1B,KAAD,CAAR;AACD,GAFD;;AAIA,SAAO;AAAEb,IAAAA,KAAF;AAASS,IAAAA,OAAT;AAAkBK,IAAAA,SAAlB;AAA6BX,IAAAA,SAA7B;AAAwCa,IAAAA,cAAxC;AAAwDE,IAAAA,gBAAxD;AAA0EX,IAAAA,UAA1E;AAAsFgB,IAAAA,QAAtF;AAAgGH,IAAAA,iBAAhG;AAAmHE,IAAAA,oBAAnH;AAAyIE,IAAAA;AAAzI,GAAP;AACD;AAAA","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport reducer, { SET_USER, SET_GENRES, SET_LATER_MOVIES, SET_FRIENDS, SET_GROUP, SET_FAVORITE_MOVIES, SET_THEME } from \"../reducers/application\";\nimport axios from 'axios'\n\nconst initGenres = () => {\n  let genres = []\n  return axios.get(\"/api/genres\")\n  .then(response => {\n    genres = response.data.map(genre => {\n      return genre = {\n        id: genre.id,\n        preference: null\n      }\n    })\n    return genres\n  })\n  .catch(error => {console.log(error)})\n};\n\nexport default function useApplicationData() {\n  const [state, dispatch] = useReducer(reducer, {\n    user: JSON.parse(localStorage.getItem('user')) || \"\",\n    genres: [],\n    favorited_movies: JSON.parse(localStorage.getItem('favoritedMovies')) || [],\n    later_movies: JSON.parse(localStorage.getItem('laterMovies')) || [],\n    friends: [],\n    group: JSON.parse(localStorage.getItem('group')) || [],\n    theme: false\n  });\n\n  useEffect(() => {\n    initGenres()\n    .then(res => {\n      setGenres(res);\n    })\n  }, [])\n\n  useEffect(() => {\n    if (state.user !== \"\") {\n      Promise.all([\n        axios.get(`/api/${state.user.name}/genres`),\n        axios.get(\"/api/users\")\n      ])\n      .then((all) => {\n        setGenres(all[0].data.genres)\n        setFriends(all[1].data.users)\n      })\n      .catch(error => {console.log(error)})\n    }\n  }, [state.user])\n\n  const setUser = user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({ type: SET_USER, value: user });\n  };\n\n  const getGenres = () => {\n    axios.get(`/api/${state.user.name}/genres`)\n    .then(res => {\n      setGenres(res.data.genres)\n    })\n  }\n\n  const setGenres = genres => {\n    if (genres.length === 0) {\n      initGenres()\n      .then(res => {\n        dispatch({ type: SET_GENRES, value: res });\n      })\n    } else {\n      dispatch({ type: SET_GENRES, value: genres });\n    }\n  };\n\n  const setLaterMovies = laterMovies => {\n    localStorage.setItem(\"laterMovies\", JSON.stringify(laterMovies))\n    dispatch({ type: SET_LATER_MOVIES, value:laterMovies });\n  }\n\n  const removeLaterMovie = id => {\n    axios.delete(`/api/${state.user.name}/latermovies`, { data: { \"id\": id } })\n    .then(response => {\n      setLaterMovies(response.data.later_movies)\n    })\n    .catch(error => {console.log(error)})\n  };\n\n  const setFavoriteMovies = favoritedMovies => {\n    localStorage.setItem(\"favoritedMovies\", JSON.stringify(favoritedMovies))\n    dispatch({ type: SET_FAVORITE_MOVIES, value:favoritedMovies });\n  };\n\n  const removeFavoritedMovie = id => {\n    axios.delete(`/api/${state.user.name}/favmovies`, { data: { \"id\": id } })\n    .then(response => {\n      setFavoriteMovies(response.data.favorited_movies)\n    })\n    .catch(error => {console.log(error)})\n  };\n\n  const setFriends = friends => {\n    dispatch({ type: SET_FRIENDS, value: friends });\n  };\n\n  const setGroup = group => {\n    if (state.group.length === 1 && group.length === 0 ) {\n      getGenres();\n      setTheme(false);\n    }\n    localStorage.setItem(\"group\", JSON.stringify(group))\n    dispatch({ type: SET_GROUP, value: group });\n  };\n\n  const setTheme = value => {\n    dispatch({ type: SET_THEME, value: value });\n  }\n\n  return { state, setUser, getGenres, setGenres, setLaterMovies, removeLaterMovie, setFriends, setGroup, setFavoriteMovies, removeFavoritedMovie, setTheme };\n};\n"]},"metadata":{},"sourceType":"module"}